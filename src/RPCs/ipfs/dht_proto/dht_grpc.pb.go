// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: dht.proto

package dht_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DHT_ServiceClient is the client API for DHT_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHT_ServiceClient interface {
	// from their david design doc, im not sure what ping is for
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DelPeer(ctx context.Context, in *DelPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNearestNeighbors(ctx context.Context, in *GetNearestNeighborsRequest, opts ...grpc.CallOption) (*GetNearestNeighborsReply, error)
}

type dHT_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDHT_ServiceClient(cc grpc.ClientConnInterface) DHT_ServiceClient {
	return &dHT_ServiceClient{cc}
}

func (c *dHT_ServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/dht_proto.DHT_Service/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHT_ServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dht_proto.DHT_Service/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHT_ServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/dht_proto.DHT_Service/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHT_ServiceClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dht_proto.DHT_Service/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHT_ServiceClient) DelPeer(ctx context.Context, in *DelPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dht_proto.DHT_Service/DelPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHT_ServiceClient) GetNearestNeighbors(ctx context.Context, in *GetNearestNeighborsRequest, opts ...grpc.CallOption) (*GetNearestNeighborsReply, error) {
	out := new(GetNearestNeighborsReply)
	err := c.cc.Invoke(ctx, "/dht_proto.DHT_Service/GetNearestNeighbors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHT_ServiceServer is the server API for DHT_Service service.
// All implementations must embed UnimplementedDHT_ServiceServer
// for forward compatibility
type DHT_ServiceServer interface {
	// from their david design doc, im not sure what ping is for
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Put(context.Context, *PutRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
	AddPeer(context.Context, *AddPeerRequest) (*emptypb.Empty, error)
	DelPeer(context.Context, *DelPeerRequest) (*emptypb.Empty, error)
	GetNearestNeighbors(context.Context, *GetNearestNeighborsRequest) (*GetNearestNeighborsReply, error)
	mustEmbedUnimplementedDHT_ServiceServer()
}

// UnimplementedDHT_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDHT_ServiceServer struct {
}

func (UnimplementedDHT_ServiceServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDHT_ServiceServer) Put(context.Context, *PutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDHT_ServiceServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDHT_ServiceServer) AddPeer(context.Context, *AddPeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeer not implemented")
}
func (UnimplementedDHT_ServiceServer) DelPeer(context.Context, *DelPeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPeer not implemented")
}
func (UnimplementedDHT_ServiceServer) GetNearestNeighbors(context.Context, *GetNearestNeighborsRequest) (*GetNearestNeighborsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearestNeighbors not implemented")
}
func (UnimplementedDHT_ServiceServer) mustEmbedUnimplementedDHT_ServiceServer() {}

// UnsafeDHT_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHT_ServiceServer will
// result in compilation errors.
type UnsafeDHT_ServiceServer interface {
	mustEmbedUnimplementedDHT_ServiceServer()
}

func RegisterDHT_ServiceServer(s grpc.ServiceRegistrar, srv DHT_ServiceServer) {
	s.RegisterService(&DHT_Service_ServiceDesc, srv)
}

func _DHT_Service_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHT_ServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht_proto.DHT_Service/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHT_ServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Service_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHT_ServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht_proto.DHT_Service/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHT_ServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHT_ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht_proto.DHT_Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHT_ServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Service_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHT_ServiceServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht_proto.DHT_Service/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHT_ServiceServer).AddPeer(ctx, req.(*AddPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Service_DelPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHT_ServiceServer).DelPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht_proto.DHT_Service/DelPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHT_ServiceServer).DelPeer(ctx, req.(*DelPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Service_GetNearestNeighbors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearestNeighborsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHT_ServiceServer).GetNearestNeighbors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht_proto.DHT_Service/GetNearestNeighbors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHT_ServiceServer).GetNearestNeighbors(ctx, req.(*GetNearestNeighborsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DHT_Service_ServiceDesc is the grpc.ServiceDesc for DHT_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHT_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dht_proto.DHT_Service",
	HandlerType: (*DHT_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DHT_Service_Ping_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _DHT_Service_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DHT_Service_Get_Handler,
		},
		{
			MethodName: "AddPeer",
			Handler:    _DHT_Service_AddPeer_Handler,
		},
		{
			MethodName: "DelPeer",
			Handler:    _DHT_Service_DelPeer_Handler,
		},
		{
			MethodName: "GetNearestNeighbors",
			Handler:    _DHT_Service_GetNearestNeighbors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dht.proto",
}
